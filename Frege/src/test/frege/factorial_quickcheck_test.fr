module Factorial_QuickCheck_Test where

import Test.QuickCheck(quickCheck, property)
import Test.QuickCheckModifiers(NonNegative)

import Factorial(iterative, naïveRecursive, tailRecursive)

factorial_property :: (Integer -> Integer) -> Integer -> Bool
factorial_property f n
    | n == 0 = f n == 1
    | otherwise = f n == n * f (n - 1)

factorial_iterative_property = property ((factorial_property iterative) . NonNegative.getNonNegative)
factorial_naïveRecursive_property = property ((factorial_property naïveRecursive) . NonNegative.getNonNegative)
factorial_tailRecursive_property = property ((factorial_property tailRecursive) . NonNegative.getNonNegative)
