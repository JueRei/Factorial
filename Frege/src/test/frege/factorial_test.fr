module Factorial_Test where

import Factorial(iterative, na誰veRecursive, tailRecursive)
import Test.QuickCheck(quickCheck, forAll, choose)

-- smallNonNegativeIntegers = choose (0, 500)

-- prop_factorial_positive :: (Integer -> Integer) -> Boolean
-- prop_factorial_positive f = forAll smallNonNegativeIntegers $ \n -> f (n + 1) == n * f n

-- smallNegativeIntegers = choose (100, -1)

-- prop_factorial_negative :: (Integer -> Integer) -> Boolean
-- prop_factorial_negative f = forAll smallNegativeIntegers $ \n -> f n == 0

-- main :: IO
-- main = do
--     quickCheck (prop_factorial_positive iterative)
--     quickCheck (prop_factorial_positive na誰veRecursive)
--     quickCheck (prop_factorial_positive tailRecursive)
--     quickCheck (prop_factorial_negative iterative)
--     quickCheck (prop_factorial_negative na誰veRecursive)
--     quickCheck (prop_factorial_negative tailRecursive)

prop_relation :: (Integer -> Integer) -> Integer -> Bool
prop_relation f n
    | n < 0 = f n == 0
    | n == 0 = f n == 1
    | n > 0 = f n == n * f (n - 1)

main :: IO()
main = do
  quickCheck (prop_relation iterative)
  quickCheck (prop_relation na誰veRecursive)
  quickCheck (prop_relation tailRecursive)
