module Factorial_Test where

import Test.QuickCheck(quickCheck, property)

import Factorial(iterative, naïveRecursive, tailRecursive)

factorial_property :: (Integer -> Integer) -> Integer -> Bool
factorial_property f n
    | n < 0 = f n == 0
    | n == 0 = f n == 1
    | otherwise = f n == n * f (n - 1)

factorial_iterative_property = property (factorial_property iterative)
factorial_naïveRecursive_property = property (factorial_property naïveRecursive)
factorial_tailRecursive_property = property (factorial_property tailRecursive)
