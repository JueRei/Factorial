module Factorial_Test where

import Factorial(iterative, na誰veRecursive, tailRecursive)
import Test.QuickCheck(quickCheck, forAll, choose)

-- smallNonNegativeIntegers = choose (0, 500)

-- property_factorial_positive :: (Integer -> Integer) -> Boolean
-- property_factorial_positive f = forAll smallNonNegativeIntegers $ \n -> f (n + 1) == n * f n

-- smallNegativeIntegers = choose (100, -1)

-- property_factorial_negative :: (Integer -> Integer) -> Boolean
-- property_factorial_negative f = forAll smallNegativeIntegers $ \n -> f n == 0

property :: (Integer -> Integer) -> Integer -> Bool
property f n
    | n < 0 = f n == 0
    | n == 0 = f n == 1
    | otherwise = f n == n * f (n - 1)

main :: IO()
main = do
  -- quickCheck (property_factorial_positive iterative)
  -- quickCheck (property_factorial_positive na誰veRecursive)
  -- quickCheck (property_factorial_positive tailRecursive)

  -- quickCheck (property_factorial_negative iterative)
  -- quickCheck (property_factorial_negative na誰veRecursive)
  -- quickCheck (property_factorial_negative tailRecursive)

  quickCheck (property iterative)
  quickCheck (property na誰veRecursive)
  quickCheck (property tailRecursive)
